# sidebar
sidebarPanel(
# input
sliderInput(inputId = "bins",
label = "Number of bins",
mix = 1,
max = 100,
value = 30)
),
# main panel
mainPanel(
#plot output
plotOutput(outputId = "distPlot")
)
)
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
shinyApp(ui = ui, server = server)
library(shiny)
## app.R ##
ui <- fluidPage(
# title
titlePanel("Hello Shiny!")
# sidebar
sidebarPanel(
# input
sliderInput(inputId = "bins",
label = "Number of bins",
mix = 1,
max = 100,
value = 30)
),
# main panel
mainPanel(
#plot output
plotOutput(outputId = "distPlot")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
## app.R ##
ui <- fluidPage(
# title
titlePanel("Hello Shiny!")
# sidebar
sidebarPanel(
# input
sliderInput(inputId = "bins",
label = "Number of bins",
mix = 1,
max = 100,
value = 30)
),
# main panel
mainPanel(
#plot output
plotOutput(outputId = "distPlot")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
## app.R ##
ui <- fluidPage(
titlePanel("Application Title"),
navlistPanel(
"Header A",
tabPanel("Component 1"),
tabPanel("Component 2"),
"Header B",
tabPanel("Component 3"),
tabPanel("Component 4"),
"-----",
tabPanel("Component 5")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot1 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot3 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
## app.R ##
ui <- fluidPage(
titlePanel("Application Title"),
navlistPanel(
"Header A",
tabPanel("Component 1", value = "https://www.baidu.com"),
tabPanel("Component 2"),
"Header B",
tabPanel("Component 3"),
tabPanel("Component 4"),
"-----",
tabPanel("Component 5")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot1 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot3 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
?tabPanel
library(shiny)
## app.R ##
ui <- navbarPage("My Application",
tabPanel("Component 1"),
tabPanel("Component 2"),
tabPanel("Component 3")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot1 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot2 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
output$distPlot3 <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
## app.R ##
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
library(shiny)
## app.R ##
shinyApp(
ui = tagList(
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
runApp()
library(shiny)
## app.R ##
shinyApp(
ui = tagList(
navbarPage(
tabPanel("Course Data",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Default actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2", "This panel is intentionally left blank"),
tabPanel("Tab 3", "This panel is intentionally left blank")
)
)
),
tabPanel("Student Data", titlePanel("hello")),
tabPanel("About this Project", "This panel is intentionally left blank")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
runApp()
runApp()
runApp()
hist(rnorm(100))
hist(rnorm(100))
runApp()
runApp()
# barplot
ggplot(data = students_freq, mapping = aes(x = n, y = reorder(postAuthor, n))) +
geom_col(na.rm = TRUE, orientation = "y") +
geom_vline(xintercept = median(students_freq$n), color = "red") +
geom_text(aes(x = 43, y = 3, label = "median reference")) +
labs( x = "numbers of posts", y = "student",
title = "Number of Posts by Students") +
theme_bw()
# barplot
ggplot(data = students_freq, mapping = aes(x = n, y = reorder(postAuthor, n))) +
geom_col(na.rm = TRUE, orientation = "y") +
geom_vline(xintercept = median(students_freq$n), color = "red") +
geom_text(aes(x = 43, y = 3, label = "median reference")) +
labs( x = "numbers of posts", y = "student",
title = "Number of Posts by Students") +
theme_bw()
runApp()
runApp()
runApp()
?selectInput()
library(shiny)
library(tidyverse)
source("data-visualization.R")
## app.R ##
shinyApp(
ui = tagList(
# shinythemes::themeSelector(),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"student engagement visulization",
tabPanel("Course",
mainPanel(
plotOutput("number_posts"),
plotOutput("reply_to_other"),
plotOutput("positive_prof")
)
),
tabPanel("Student",
sidebarPanel(
selectInput("student",
choices = students_posts_table$postAuthor,
label = "孫哲")
),
mainPanel(
plotOutput("student_posts_byDate"),
plotOutput("replyToOther_byDate")
)),
tabPanel("About", "This panel is intentionally left blank"))
),
server = function(input, output) {
output$number_posts <- renderPlot({
# barplot
ggplot(data = students_freq, mapping = aes(x = n, y = reorder(postAuthor, n))) +
geom_col(na.rm = TRUE, orientation = "y") +
geom_vline(xintercept = median(students_freq$n), color = "red") +
geom_text(aes(x = 43, y = 3, label = "median reference")) +
labs( x = "numbers of posts", y = "student",
title = "Number of Posts by Students") +
theme_bw()
})
output$reply_to_other <- renderPlot({
ggplot(data = replyToOther_freq, mapping = aes(x = replyToOther_times,
y = reorder(replyBy, replyToOther_times))) +
geom_col(na.rm = TRUE, orientation = "y") +
geom_vline(xintercept = median(replyToOther_freq$replyToOther_times), color = "red") +
geom_text(aes(x = 3, y = 3, label = "median reference")) +
labs( x = "times student reply to the posts of other classmates", y = "students",
title = "Number of Times Reply to The Post of Other Classmate by Studetns") +
theme_bw()
})
output$positive_prof <- renderPlot({
ggplot(data = positivie_freq, mapping = aes(x = n,
y = reorder(postAuthor, n))) +
geom_col(na.rm = TRUE, orientation = "y") +
geom_vline(xintercept = median(replyToOther_freq$replyToOther_times), color = "red") +
geom_text(aes(x = 2, y = 3, label = "median reference")) +
labs( x = "number of times professor gave positive comment", y = "students",
title = "Number of Positive commnets Given by Professor") +
theme_bw()
})
output$student_posts_byDate <- renderPlot({
ggplot(data = post_freq_student_byDate[post_freq_student_byDate$postAuthor == input$student,],
mapping = aes(x = date, y = n))  +
geom_point() +
geom_line(aes(color = "selected student")) +
geom_point(aes(x = date, y = median)) +
geom_line(aes(x = date, y = median, color = "median reference")) +
scale_x_date(date_breaks = "1 week") +
ylim(min = 0, max = 20) +
labs(x = "course presented date",
y = "number of posts",
title = "Number of Posts of Each Student by Course Session",
color = "line color") +
theme_bw()
})
output$replyToOther_byDate <- renderPlot({
ggplot(data = replyToOther_byDate[replyToOther_byDate$replyBy == "廖傑恩",],
mapping = aes(x = date, y = n))  +
geom_point() +
geom_line(aes(color = "selected student")) +
scale_x_date(date_breaks = "1 week") +
ylim(min = 0, max = 10) +
labs(x = "course presented date",
y = "number of posts",
title = "Number of Posts of Each Student by Course Session",
color = "line color") +
theme_bw()
})
}
)
?selectInput
runApp()
?selectInput
students_posts_table$postAuthor
runApp()
runApp()
